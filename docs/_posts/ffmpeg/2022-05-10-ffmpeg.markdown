---
layout: default
title:  "How to compile FFmpeg and its commonly used commands"
date:   2022-05-10 18:31:33 +0800
categories: ffmpeg
---

# Abstract
About compiling ffmpeg and common used commands of ffmpeg.

# Compile ffmpeg
see [build-ffmpeg-av1-svt](https://www.iiwnz.com/build-ffmpeg-av1-svt/)

Scipts for configuring ffmpeg with av1
```shell
./configure  --prefix=/usr/local --enable-gpl --enable-nonfree --enable-libass --enable-ffplay \
--enable-libfdk-aac --enable-libfreetype --enable-libmp3lame \
--enable-libtheora --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libx265 --enable-libopus --enable-libxvid \
--enable-libaom --samples=fate-suite --extra-cflags=-I/usr/local/Cellar/sdl2/2.0.12_1/include/SDL2 --extra-ldflags=-L/usr/local/Cellar/sdl2/2.0.12_1/lib
```

* firstly ,compile `aom` to dir identified by `--prefix=`,details see av1/compile_av1.md
* secondly,use scipts above to compile ffmpeg from source,`--enable-libaom` is specified.

```shell
$  cd ffmpeg
$  ./confiure  with params above
$  make install
```

Scripts for builidng ffmpeg with default fetures and enable shared library.
```shell
./configure  --prefix=/usr/local --enable-shared
make -j14
make install
```

# Common used commands of ffmpeg
## Convert a mp4 to mkv using av1 codec
```shell
$ ffmpeg -i Samsung_Demo_Video.mp4 -c:v libaom-av1 -crf 30 -cpu-used 8 -row-mt 1  -usage 1 -threads 8 -b:v 2M av1_test.mkv
```

The encoding speed is really slow if these options not set
* -usage
* -cpu-used
* -row-mt
* -threads

## Convert a mp4 to mkv using h264 codec
```shell
$ ffmpeg -i Samsung_Demo_Video.mp4 -c:v h264 -b:v 200K av1_test_h264.mkv
```
## Convert av1 to h264 loselessly
```shell
$ ffmpeg -i input -c:v libx264 -preset veryslow -qp 0 output.mkv
```
or
```shell
$ ffmpeg -i input -c:v libx264 -preset veryslow -crf 0 output.mkv
```

## Decode ivf file
```shell
> ffmpeg -i webrtc_receive_stream_281617081-592520956585.ivf -c:v libx264 ivf.mkv
```

## Rotate 90°
```shell
$ ffmpeg -i Samsung_Demo_Video.mp4 -vf "transpose=1" output.mp4
```

```shell
$ ffmpeg  -video_size 1280x720 -pixel_format yuv420p -i ConferenceMotion_1280_720_50.yuv -vf "transpose=1" ConferenceMotion_720_1280_50.yuv 
```

## Convert .mp4 to .y4m
```
$ ffmpeg -y -i samsung_demo_video.mp4 -pix_fmt yuv420p  -an ref.y4m
```

## Convert .yuv to .y4m
```shell
$ ffmpeg -video_size 1280x720 -framerate 25 -pixel_format yuv420p -i ConferenceMotion_1280_720_50.yuv ConferenceMotion_1280_720_50.y4m
```

If the converted .y4m file is used as the input file of `FileVideoCapturer` in WebRTC,you NEED replace `C420jpeg` to `C420` in the first line of the file,otherwise,it will break `FileVideoCapturer`.

## Convert .mp4 to .yuv
```shell
$  ffmpeg -i samsung_Demo_Video_720x1280_200kbps.mp4 -c:v rawvideo -pix_fmt yuv420p samsung_Demo_Video_720x1280_200kbps.yuv
```

## Convert .ivf to .mp4

When converting .ivf(which contains H.264),`-vsync 2` is needed,otherwise,converting will be failed.
* ffmpeg -i h264_720_1280.ivf -c:v libx264 -crf 18 -profile:v baseline h264.mp4
* ffmpeg -i h264_720_1280.ivf -c:v libx264 -crf 18 -profile:v baseline -vsync 2 h264.mp4

**NOTE:** if .ivf containing AV1,`-vsync 2` is not needed.


```shell
➜ ffmpeg ffmpeg -i h264_720_1280.ivf -c:v libx264 -crf 18 -profile:v baseline h264.mp4
ffmpeg version N-105291-gdcc9454ab9 Copyright (c) 2000-2022 the FFmpeg developers
  built with Apple clang version 13.0.0 (clang-1300.0.29.3)
  configuration: --prefix=/usr/local --enable-gpl --enable-nonfree --enable-libass --enable-ffplay --enable-libfdk-aac --enable-libfreetype --enable-libmp3lame --enable-libtheora --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libx265 --enable-libopus --enable-libxvid --enable-libaom --samples=fate-suite --extra-cflags=-I/usr/local/Cellar/sdl2/2.0.12_1/include/SDL2 --extra-ldflags=-L/usr/local/Cellar/sdl2/2.0.12_1/lib
  libavutil      57. 18.100 / 57. 18.100
  libavcodec     59. 20.100 / 59. 20.100
  libavformat    59. 17.101 / 59. 17.101
  libavdevice    59.  5.100 / 59.  5.100
  libavfilter     8. 25.100 /  8. 25.100
  libswscale      6.  5.100 /  6.  5.100
  libswresample   4.  4.100 /  4.  4.100
  libpostproc    56.  4.100 / 56.  4.100
Input #0, ivf, from 'h264_720_1280.ivf':
  Duration: 00:00:00.02, start: 8448.580044, bitrate: 6933714 kb/s
  Stream #0:0: Video: h264 (Baseline) (H264 / 0x34363248), yuvj420p(pc, progressive), 720x1280, 90k tbr, 90k tbn
Stream mapping:
  Stream #0:0 -> #0:0 (h264 (native) -> h264 (libx264))
Press [q] to stop, [?] for help
[mp4 @ 0x7f8523f05ec0] Frame rate very high for a muxer not efficiently supporting it.
Please consider specifying a lower framerate, a different muxer or -vsync 2
[libx264 @ 0x7f8523f06cc0] MB rate (324000000) > level limit (16711680)
[libx264 @ 0x7f8523f06cc0] using cpu capabilities: MMX2 SSE2Fast SSSE3 SSE4.2 AVX FMA3 BMI2 AVX2
[libx264 @ 0x7f8523f06cc0] profile Constrained Baseline, level 6.2, 4:2:0, 8-bit
[libx264 @ 0x7f8523f06cc0] 264 - core 161 r3027 4121277 - H.264/MPEG-4 AVC codec - Copyleft 2003-2020 - http://www.videolan.org/x264.html - options: cabac=0 ref=3 deblock=1:0:0 analyse=0x1:0x111 me=hex subme=7 psy=1 psy_rd=1.00:0.00 mixed_ref=1 me_range=16 chroma_me=1 trellis=1 8x8dct=0 cqm=0 deadzone=21,11 fast_pskip=1 chroma_qp_offset=-2 threads=18 lookahead_threads=3 sliced_threads=0 nr=0 decimate=1 interlaced=0 bluray_compat=0 constrained_intra=0 bframes=0 weightp=0 keyint=250 keyint_min=25 scenecut=40 intra_refresh=0 rc_lookahead=40 rc=crf mbtree=1 crf=18.0 qcomp=0.60 qpmin=0 qpmax=69 qpstep=4 ip_ratio=1.40 aq=1:1.00
Output #0, mp4, to 'h264.mp4':
  Metadata:
    encoder         : Lavf59.17.101
  Stream #0:0: Video: h264 (avc1 / 0x31637661), yuvj420p(pc, progressive), 720x1280, q=2-31, 90k fps, 90k tbn
    Metadata:
      encoder         : Lavc59.20.100 libx264
    Side data:
      cpb: bitrate max/min/avg: 0/0/0 buffer size: 0 vbv_delay: N/A
More than 1000 frames duplicated      0kB time=00:00:00.00 bitrate=N/A speed=   0x
^C^Cav_interleaved_write_frame(): Immediate exit requested
^CReceived > 3 system signals, hard exiting
➜  ffmpeg
➜  ffmpeg ffmpeg -i h264_720_1280.ivf -c:v libx264 -crf 18 -profile:v baseline -vsync 2 h264.mp4
ffmpeg version N-105291-gdcc9454ab9 Copyright (c) 2000-2022 the FFmpeg developers
  built with Apple clang version 13.0.0 (clang-1300.0.29.3)
  configuration: --prefix=/usr/local --enable-gpl --enable-nonfree --enable-libass --enable-ffplay --enable-libfdk-aac --enable-libfreetype --enable-libmp3lame --enable-libtheora --enable-libvorbis --enable-libvpx --enable-libx264 --enable-libx265 --enable-libopus --enable-libxvid --enable-libaom --samples=fate-suite --extra-cflags=-I/usr/local/Cellar/sdl2/2.0.12_1/include/SDL2 --extra-ldflags=-L/usr/local/Cellar/sdl2/2.0.12_1/lib
  libavutil      57. 18.100 / 57. 18.100
  libavcodec     59. 20.100 / 59. 20.100
  libavformat    59. 17.101 / 59. 17.101
  libavdevice    59.  5.100 / 59.  5.100
  libavfilter     8. 25.100 /  8. 25.100
  libswscale      6.  5.100 /  6.  5.100
  libswresample   4.  4.100 /  4.  4.100
  libpostproc    56.  4.100 / 56.  4.100
Passing a number to -vsync is deprecated, use a string argument as described in the manual.
Input #0, ivf, from 'h264_720_1280.ivf':
  Duration: 00:00:00.02, start: 8448.580044, bitrate: 6933714 kb/s
  Stream #0:0: Video: h264 (Baseline) (H264 / 0x34363248), yuvj420p(pc, progressive), 720x1280, 90k tbr, 90k tbn
File 'h264.mp4' already exists. Overwrite? [y/N] y
Stream mapping:
  Stream #0:0 -> #0:0 (h264 (native) -> h264 (libx264))
Press [q] to stop, [?] for help
[libx264 @ 0x7fcd70107ac0] MB rate (324000000) > level limit (16711680)
[libx264 @ 0x7fcd70107ac0] using cpu capabilities: MMX2 SSE2Fast SSSE3 SSE4.2 AVX FMA3 BMI2 AVX2
[libx264 @ 0x7fcd70107ac0] profile Constrained Baseline, level 6.2, 4:2:0, 8-bit
[libx264 @ 0x7fcd70107ac0] 264 - core 161 r3027 4121277 - H.264/MPEG-4 AVC codec - Copyleft 2003-2020 - http://www.videolan.org/x264.html - options: cabac=0 ref=3 deblock=1:0:0 analyse=0x1:0x111 me=hex subme=7 psy=1 psy_rd=1.00:0.00 mixed_ref=1 me_range=16 chroma_me=1 trellis=1 8x8dct=0 cqm=0 deadzone=21,11 fast_pskip=1 chroma_qp_offset=-2 threads=18 lookahead_threads=3 sliced_threads=0 nr=0 decimate=1 interlaced=0 bluray_compat=0 constrained_intra=0 bframes=0 weightp=0 keyint=250 keyint_min=25 scenecut=40 intra_refresh=0 rc_lookahead=40 rc=crf mbtree=1 crf=18.0 qcomp=0.60 qpmin=0 qpmax=69 qpstep=4 ip_ratio=1.40 aq=1:1.00
Output #0, mp4, to 'h264.mp4':
  Metadata:
    encoder         : Lavf59.17.101
  Stream #0:0: Video: h264 (avc1 / 0x31637661), yuvj420p(pc, progressive), 720x1280, q=2-31, 90k fps, 90k tbn
    Metadata:
      encoder         : Lavc59.20.100 libx264
    Side data:
      cpb: bitrate max/min/avg: 0/0/0 buffer size: 0 vbv_delay: N/A
frame= 1617 fps=204 q=-1.0 Lsize=   22800kB time=00:01:15.62 bitrate=2469.9kbits/s speed=9.52x
video:22782kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: 0.075776%
[libx264 @ 0x7fcd70107ac0] frame I:23    Avg QP:10.80  size: 66417
[libx264 @ 0x7fcd70107ac0] frame P:1594  Avg QP:15.66  size: 13677
[libx264 @ 0x7fcd70107ac0] mb I  I16..4: 47.4%  0.0% 52.6%
[libx264 @ 0x7fcd70107ac0] mb P  I16..4:  5.9%  0.0%  6.6%  P16..4: 21.7%  6.8%  2.2%  0.0%  0.0%    skip:56.8%
[libx264 @ 0x7fcd70107ac0] coded y,uvDC,uvAC intra: 47.5% 66.8% 38.1% inter: 7.9% 15.8% 2.6%
[libx264 @ 0x7fcd70107ac0] i16 v,h,dc,p: 43% 22% 10% 25%
[libx264 @ 0x7fcd70107ac0] i4 v,h,dc,ddl,ddr,vr,hd,vl,hu: 31% 22% 15%  5%  6%  6%  5%  5%  4%
[libx264 @ 0x7fcd70107ac0] i8c dc,h,v,p: 39% 22% 25% 14%
[libx264 @ 0x7fcd70107ac0] ref P L0: 87.8%  8.2%  4.1%
[libx264 @ 0x7fcd70107ac0] kb/s:2466.52
```

## Convert .ivf to .yuv
```shell
$ ffmpeg -i webrtc_receive_stream_3634942123-65095821676.ivf -c:v rawvideo -pix_fmt yuv420p av1_720_1280_ref.yuv
```


## ffplay .yuv
```shell
$ ffplay -f rawvideo -pixel_format yuv420p -video_size 1280x720 -i ref.yuv
```

## ffprobe show all frames info
```shell
$ ffprobe -show_frames -f rawvideo -pixel_format yuv420p -video_size 720x1280 av1_720_1280_test.yuv > av1_all_frames_info.log
```

result format as below:
>[FRAME]
>media_type=video
>stream_index=0
>key_frame=1
>pts=1625
>pts_time=65.000000
>pkt_dts=1625
>pkt_dts_time=65.000000
>best_effort_timestamp=1625
>best_effort_timestamp_time=65.000000
>pkt_duration=1
>pkt_duration_time=0.040000
>pkt_pos=2246400000
>pkt_size=1382400
>width=720
>height=1280
>pix_fmt=yuv420p
>sample_aspect_ratio=N/A
>pict_type=I
>coded_picture_number=0
>display_picture_number=0
>interlaced_frame=0
>top_field_first=0
>repeat_pict=0
>color_range=unknown
>color_space=unknown
>color_primaries=unknown
>color_transfer=unknown
>chroma_location=unspecified
>[/FRAME]

* `pts` or `pkt_dts` is the frame sequence number.

## Keep  number of frames from start position left in .yuv
```shell
$ ffmpeg -video_size 720x1280 -i av1_720_1280_test.yuv -frames 1627 -c:v copy -video_size 720x1280 av1_720_1280_test_2.yuv
```

* Raw video does not contain info about the picture size,so we need specify `-video_size` before `-i`

## Keep number of frames in range left in .yuv
```shell
$ ffmpeg -video_size 720x1280 -i h264_720_1280_ref.yuv -vf "select=gte(n\,20)*lt(n\,1626)" -c:v rawvideo -pix_fmt yuv420p  h264_720_1280_ref_2.yuv
```

* frames in range[20,1627) will be kept left in result file.frames in range[0,20) are deleted. 

## Extract one specific frame from video file
```shell
$ ffmpeg  -video_size 720x1280 -i av1_720_1280_test_2.yuv -vf "select=eq(n\,1606)" -vframes 1 out.png
```

* counting starts at 0, so 35th = n value of 34.

## Set profile and level for H.264
```shell
$ ffmpeg -i h264_720_1280.ivf -c:v libx264 -crf 18 -profile:v baseline h264.mp4
```

* baseline
* main
* high

When encoding with libx264, you can set the H.264 profile and level with:
* -profile:v – one of high, main, or baseline (and others, but this is irrelevant here)
* -level:v – as defined in Annex A of the H.264 standard, e.g., 4.0.

## Resize video resolution
```shell
$ ffmpeg -i input.mp4 -vf scale=-1:720 output.mp4
$ ffmpeg -i input.mp4 -vf scale=1280:720 output.mp4
$ ffmpeg -i input.mp4 -vf scale=1280:-1 output.mp4
```

# Use ffmpeg to join video files
see [create_mosaic_out_several_input_videos][create_mosaic_out_several_input_videos]

## Horizontal
```shell
$ ffmpeg -i h264_1mkv -i h264_2.mkv -filter_complex "[0:v][1:v]hstack"  horizontal.mkv
```
or
```shell
ffmpeg -i h264_1.mkv -i h264_2.mkv -filter_complex \
"nullsrc=size=2560x720 [base]; \
[0:v] setpts=PTS-STARTPTS, scale=1280x720 [left]; \
[1:v] setpts=PTS-STARTPTS, scale=1280x720 [right]; \
[base][left] overlay=shortest=1 [tmp1]; \
[tmp1][right] overlay=shortest=1:x=1280 \
" horizontal.mkv

```

## Vertical
```
$ ffmpeg -i h264_1mkv -i h264_2.mkv -filter_complex "[0:v][1:v]vstack"  vertical.mkv
```
or
```shell
$ ffmpeg -i h264_1.mkv -i h264_2.mkv -filter_complex "nullsrc=size=1280x1440 [base];[0:v] setpts=PTS-STARTPTS, scale=1280x720 [top]; [1:v] setpts=PTS-STARTPTS, scale=1280x720 [bottom]; [base][top] overlay=shortest=1 [tmp1]; [tmp1][bottom] overlay=shortest=1:y=720  " vertical.mkv
```
or
```shell
 $ ffmpeg -i h264_1.mkv -i h264_2.mkv -filter_complex \
"nullsrc=size=1280x1440 [base]; \
[0:v] setpts=PTS-STARTPTS, scale=1280x720 [top]; \
[1:v] setpts=PTS-STARTPTS, scale=1280x720 [bottom]; \
[base][top] overlay=shortest=1 [tmp1]; \
[tmp1][bottom] overlay=shortest=1:y=720 \
" vertical.mkv
```

# References
[ffmpeg-filters-overlay]: https://ffmpeg.org/ffmpeg-filters.html#overlay-1
[create_mosaic_out_several_input_videos]: https://trac.ffmpeg.org/wiki/Create%20a%20mosaic%20out%20of%20several%20input%20videos
[Lossless H.264]: https://trac.ffmpeg.org/wiki/Encode/H.264
